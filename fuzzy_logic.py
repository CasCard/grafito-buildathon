# -*- coding: utf-8 -*-
"""Grafito_Fuzzy_control.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1Di--3V0GS_ssci5_LkurU2nbdLDyqoO3
"""


import numpy as np
import skfuzzy as fuzz
from skfuzzy import control as ctrl
import time


class FuzzyLogic:
    def __init__(self):
        # Linguistic terms of the input and output
        self.Soil_moisture = ctrl.Antecedent(
            np.arange(0, 60, 10), 'Soil_moisture')
        self.Humidity = ctrl.Antecedent(np.arange(0, 60, 10), 'Humidity')
        self.Temperature = ctrl.Antecedent(np.arange(0, 60, 10), 'Temperature')
        self.Rate_of_fluid = ctrl.Antecedent(
            np.arange(0, 14, 2), 'Rate_of_fluid')
        self.Opening_of_valve = ctrl.Consequent(
            np.arange(0, 100, 10), 'Opening_of_valve')

        # MF's of input soil_moisture
        self.Soil_moisture['dry'] = fuzz.trapmf(
            self.Soil_moisture.universe, [0, 0, 10, 15])
        self.Soil_moisture['normal'] = fuzz.trimf(
            self.Soil_moisture.universe, [10, 20, 30])
        self.Soil_moisture['absolutely_wet'] = fuzz.trimf(
            self.Soil_moisture.universe, [20, 30, 40])
        self.Soil_moisture['saturated'] = fuzz.trapmf(
            self.Soil_moisture.universe, [35, 40, 60, 60])
        # MF's of input Humidity
        self.Humidity['low'] = fuzz.trapmf(
            self.Humidity.universe, [0, 0, 10, 20])
        self.Humidity['medium'] = fuzz.trimf(
            self.Humidity.universe, [10, 20, 30])
        self.Humidity['high'] = fuzz.trimf(
            self.Humidity.universe, [20, 30, 40])
        self.Humidity['extremely_high'] = fuzz.trapmf(
            self.Humidity.universe, [40, 50, 60, 60])
        # MF's of input temperature
        self.Temperature['vcold'] = fuzz.trapmf(
            self.Temperature.universe, [0, 0, 10, 20])
        self.Temperature['cold'] = fuzz.trimf(
            self.Temperature.universe, [10, 20, 30])
        self.Temperature['normal'] = fuzz.trimf(
            self.Temperature.universe, [20, 30, 40])
        self.Temperature['hot'] = fuzz.trapmf(
            self.Temperature.universe, [30, 40, 60, 60])
        # MF's of input Rate_of_fluid
        self.Rate_of_fluid['low'] = fuzz.trapmf(
            self.Rate_of_fluid.universe, [0, 0, 2, 4])
        self.Rate_of_fluid['normal'] = fuzz.trimf(
            self.Rate_of_fluid.universe, [2, 6, 10])
        self.Rate_of_fluid['high'] = fuzz.trapmf(
            self.Rate_of_fluid.universe, [8, 10, 14, 14])
        # MF's of output Opening_of_valve
        self.Opening_of_valve['ten'] = fuzz.trimf(
            self.Opening_of_valve.universe, [0, 10, 20])
        self.Opening_of_valve['twenty_five'] = fuzz.trimf(
            self.Opening_of_valve.universe, [10, 30, 50])
        self.Opening_of_valve['fifty'] = fuzz.trimf(
            self.Opening_of_valve.universe, [30, 50, 70])
        self.Opening_of_valve['seventy_five'] = fuzz.trimf(
            self.Opening_of_valve.universe, [60, 70, 80])
        self.Opening_of_valve['hundred'] = fuzz.trimf(
            self.Opening_of_valve.universe, [80, 90, 100])

        # # Plot of MF for input Soil_moisture
        # self.Soil_moisture.view()

        # # Plot of MF for input Humidity
        # self.Humidity.view()

        # # Plot of MF for input Temperature
        # self.Temperature.view()

        # # Plot of MF for input Rate_of_fluid
        # self.Rate_of_fluid.view()

        # # Plot of MF for output opening_of_valve
        # self.Opening_of_valve.view()

        # Rules
        self.rule1 = ctrl.Rule(self.Soil_moisture['dry'] & self.Humidity['low'] &
                               self.Temperature['hot'] & self.Rate_of_fluid['normal'], self.Opening_of_valve['hundred'])
        self.rule2 = ctrl.Rule(self.Soil_moisture['dry'] & self.Humidity['low'] &
                               self.Temperature['normal'] & self.Rate_of_fluid['normal'], self.Opening_of_valve['seventy_five'])
        self.rule3 = ctrl.Rule(self.Soil_moisture['dry'] & self.Humidity['low'] &
                               self.Temperature['cold'] & self.Rate_of_fluid['normal'], self.Opening_of_valve['seventy_five'])
        self.rule4 = ctrl.Rule(self.Soil_moisture['dry'] & self.Humidity['low'] &
                               self.Temperature['vcold'] & self.Rate_of_fluid['normal'], self.Opening_of_valve['fifty'])
        self.rule5 = ctrl.Rule(self.Soil_moisture['normal'] & self.Humidity['medium'] &
                               self.Temperature['vcold'] & self.Rate_of_fluid['normal'], self.Opening_of_valve['seventy_five'])
        self.rule6 = ctrl.Rule(self.Soil_moisture['normal'] & self.Humidity['high'] &
                               self.Temperature['cold'] & self.Rate_of_fluid['normal'], self.Opening_of_valve['fifty'])
        self.rule7 = ctrl.Rule(self.Soil_moisture['normal'] & self.Humidity['extremely_high'] &
                               self.Temperature['normal'] & self.Rate_of_fluid['normal'], self.Opening_of_valve['seventy_five'])
        self.rule8 = ctrl.Rule(self.Soil_moisture['absolutely_wet'] & self.Humidity['low'] &
                               self.Temperature['normal'] & self.Rate_of_fluid['normal'], self.Opening_of_valve['twenty_five'])
        self.rule9 = ctrl.Rule(self.Soil_moisture['absolutely_wet'] & self.Humidity['medium'] &
                               self.Temperature['normal'] & self.Rate_of_fluid['normal'], self.Opening_of_valve['twenty_five'])
        self.rule10 = ctrl.Rule(self.Soil_moisture['absolutely_wet'] & self.Humidity['high'] &
                                self.Temperature['normal'] & self.Rate_of_fluid['normal'], self.Opening_of_valve['twenty_five'])
        self.rule11 = ctrl.Rule(self.Soil_moisture['saturated'] & self.Humidity['low'] &
                                self.Temperature['normal'] & self.Rate_of_fluid['normal'], self.Opening_of_valve['twenty_five'])
        self.rule12 = ctrl.Rule(self.Soil_moisture['saturated'] & self.Humidity['medium'] &
                                self.Temperature['normal'] & self.Rate_of_fluid['normal'], self.Opening_of_valve['twenty_five'])
        self.rule13 = ctrl.Rule(self.Soil_moisture['saturated'] & self.Humidity['low'] &
                                self.Temperature['vcold'] & self.Rate_of_fluid['normal'], self.Opening_of_valve['ten'])
        self.rule14 = ctrl.Rule(self.Soil_moisture['saturated'] & self.Humidity['extremely_high']
                                & self.Temperature['vcold'] & self.Rate_of_fluid['normal'], self.Opening_of_valve['ten'])
        self.rule15 = ctrl.Rule(self.Soil_moisture['absolutely_wet'] & self.Humidity['high']
                                & self.Temperature['vcold'] & self.Rate_of_fluid['normal'], self.Opening_of_valve['ten'])
        self.rule16 = ctrl.Rule(self.Soil_moisture['saturated'] & self.Humidity['extremely_high'] &
                                self.Temperature['vcold'] & self.Rate_of_fluid['normal'], self.Opening_of_valve['twenty_five'])
        self.rule17 = ctrl.Rule(self.Soil_moisture['saturated'] & self.Humidity['extremely_high']
                                & self.Temperature['normal'] & self.Rate_of_fluid['normal'], self.Opening_of_valve['ten'])
        self.rule18 = ctrl.Rule(
            self.Rate_of_fluid['low'], self.Opening_of_valve['ten'])
        self.rule19 = ctrl.Rule(
            self.Rate_of_fluid['high'], self.Opening_of_valve['ten'])
        self.Valve_ctrl = ctrl.ControlSystem([self.rule1, self.rule2, self.rule3, self.rule4, self.rule5, self.rule6, self.rule7, self.rule8,
                                              self.rule9, self.rule10, self.rule11, self.rule12, self.rule13, self.rule14, self.rule15, self.rule16, self.rule17, self.rule18, self.rule19])

    def get_output(self, Soil_moisture, Humidity, Temperature, Rate_of_fluid):
        self.Valve = ctrl.ControlSystemSimulation(self.Valve_ctrl)
        self.Valve.input['Soil_moisture'] = Soil_moisture
        self.Valve.input['Humidity'] = Humidity
        self.Valve.input['Temperature'] = Temperature
        self.Valve.input['Rate_of_fluid'] = Rate_of_fluid
        self.Valve.compute()
        return self.Valve.output['Opening_of_valve']


if __name__ == "__main__":
    fuzzy_logic = FuzzyLogic()
    prev_time = time.time()
    print(fuzzy_logic.get_output(50, 6, 30, 5))
    print(time.time() - prev_time)
